// **********************************************************************
// Parsed By TarsParser(3.0.5), Generated By tools(20200627)
// TarsParser Maintained By <TARS> and tools Maintained By <superzheng>
// Generated from "ConfigF.tars" by Client Mode
// **********************************************************************

/* eslint-disable */

"use strict";

var assert    = require("assert");
var TarsStream = require("@tars/stream");
var TarsError  = require("@tars/rpc").error;

var _hasOwnProperty = Object.prototype.hasOwnProperty;
var _makeError = function (data, message, type) {
    var error = new Error(message || "");
    error.request = data.request;
    error.response = {
        "costtime" : data.request.costtime
    };
    if (type === TarsError.CLIENT.DECODE_ERROR) {
        error.name = "DECODE_ERROR";
        error.response.error = {
            "code" : type,
            "message" : message
        };
    } else {
        error.name = "RPC_ERROR";
        error.response.error = data.error;
    }
    return error;
};

var tars = tars || {};
module.exports.tars = tars;

tars.ConfigProxy = function () {
    this._name    = undefined;
    this._worker  = undefined;
};

tars.ConfigProxy.prototype.setTimeout = function (iTimeout) {
    this._worker.timeout = iTimeout;
};

tars.ConfigProxy.prototype.getTimeout = function () {
    return this._worker.timeout;
};

tars.ConfigProxy.prototype.setVersion = function (iVersion) {
    this._worker.version = iVersion;
};

tars.ConfigProxy.prototype.getVersion = function () {
    return this._worker.version;
};

tars.ConfigInfo = function() {
    this.appname = "";
    this.servername = "";
    this.filename = "";
    this.bAppOnly = false;
    this.host = "";
    this.setdivision = "";
    this._classname = "tars.ConfigInfo";
};
tars.ConfigInfo._classname = "tars.ConfigInfo";
tars.ConfigInfo._write = function (os, tag, value) { os.writeStruct(tag, value); };
tars.ConfigInfo._read  = function (is, tag, def) { return is.readStruct(tag, true, def); };
tars.ConfigInfo._readFrom = function (is) {
    var tmp = new tars.ConfigInfo;
    tmp.appname = is.readString(0, true, "");
    tmp.servername = is.readString(1, true, "");
    tmp.filename = is.readString(2, true, "");
    tmp.bAppOnly = is.readBoolean(3, true, false);
    tmp.host = is.readString(4, false, "");
    tmp.setdivision = is.readString(5, false, "");
    return tmp;
};
tars.ConfigInfo.prototype._writeTo = function (os) {
    os.writeString(0, this.appname);
    os.writeString(1, this.servername);
    os.writeString(2, this.filename);
    os.writeBoolean(3, this.bAppOnly);
    os.writeString(4, this.host);
    os.writeString(5, this.setdivision);
};
tars.ConfigInfo.prototype._equal = function () {
    assert.fail("this structure not define key operation");
};
tars.ConfigInfo.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = "STRUCT" + Math.random();
    }
    return this._proto_struct_name_;
};
tars.ConfigInfo.prototype.toObject = function() { 
    return {
        "appname" : this.appname,
        "servername" : this.servername,
        "filename" : this.filename,
        "bAppOnly" : this.bAppOnly,
        "host" : this.host,
        "setdivision" : this.setdivision
    };
};
tars.ConfigInfo.prototype.readFromObject = function(json) { 
    _hasOwnProperty.call(json, "appname") && (this.appname = json.appname);
    _hasOwnProperty.call(json, "servername") && (this.servername = json.servername);
    _hasOwnProperty.call(json, "filename") && (this.filename = json.filename);
    _hasOwnProperty.call(json, "bAppOnly") && (this.bAppOnly = json.bAppOnly);
    _hasOwnProperty.call(json, "host") && (this.host = json.host);
    _hasOwnProperty.call(json, "setdivision") && (this.setdivision = json.setdivision);
    return this;
};
tars.ConfigInfo.prototype.toBinBuffer = function () {
    var os = new TarsStream.TarsOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
};
tars.ConfigInfo.new = function () {
    return new tars.ConfigInfo();
};
tars.ConfigInfo.create = function (is) {
    return tars.ConfigInfo._readFrom(is);
};

tars.GetConfigListInfo = function() {
    this.appname = "";
    this.servername = "";
    this.bAppOnly = false;
    this.host = "";
    this.setdivision = "";
    this.containername = "";
    this._classname = "tars.GetConfigListInfo";
};
tars.GetConfigListInfo._classname = "tars.GetConfigListInfo";
tars.GetConfigListInfo._write = function (os, tag, value) { os.writeStruct(tag, value); };
tars.GetConfigListInfo._read  = function (is, tag, def) { return is.readStruct(tag, true, def); };
tars.GetConfigListInfo._readFrom = function (is) {
    var tmp = new tars.GetConfigListInfo;
    tmp.appname = is.readString(0, true, "");
    tmp.servername = is.readString(1, false, "");
    tmp.bAppOnly = is.readBoolean(2, false, false);
    tmp.host = is.readString(3, false, "");
    tmp.setdivision = is.readString(4, false, "");
    tmp.containername = is.readString(5, false, "");
    return tmp;
};
tars.GetConfigListInfo.prototype._writeTo = function (os) {
    os.writeString(0, this.appname);
    os.writeString(1, this.servername);
    os.writeBoolean(2, this.bAppOnly);
    os.writeString(3, this.host);
    os.writeString(4, this.setdivision);
    os.writeString(5, this.containername);
};
tars.GetConfigListInfo.prototype._equal = function () {
    assert.fail("this structure not define key operation");
};
tars.GetConfigListInfo.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = "STRUCT" + Math.random();
    }
    return this._proto_struct_name_;
};
tars.GetConfigListInfo.prototype.toObject = function() { 
    return {
        "appname" : this.appname,
        "servername" : this.servername,
        "bAppOnly" : this.bAppOnly,
        "host" : this.host,
        "setdivision" : this.setdivision,
        "containername" : this.containername
    };
};
tars.GetConfigListInfo.prototype.readFromObject = function(json) { 
    _hasOwnProperty.call(json, "appname") && (this.appname = json.appname);
    _hasOwnProperty.call(json, "servername") && (this.servername = json.servername);
    _hasOwnProperty.call(json, "bAppOnly") && (this.bAppOnly = json.bAppOnly);
    _hasOwnProperty.call(json, "host") && (this.host = json.host);
    _hasOwnProperty.call(json, "setdivision") && (this.setdivision = json.setdivision);
    _hasOwnProperty.call(json, "containername") && (this.containername = json.containername);
    return this;
};
tars.GetConfigListInfo.prototype.toBinBuffer = function () {
    var os = new TarsStream.TarsOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
};
tars.GetConfigListInfo.new = function () {
    return new tars.GetConfigListInfo();
};
tars.GetConfigListInfo.create = function (is) {
    return tars.GetConfigListInfo._readFrom(is);
};

var __tars_Config$ListConfig$IF = {
    "name" : "ListConfig",
    "return" : "int32",
    "arguments" : [{
        "name" : "app",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "server",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "vf",
        "class" : "list(string)",
        "direction" : "out"
    }]
};

var __tars_Config$ListConfig$IE = function (app, server) {
    var os = new TarsStream.TarsOutputStream();
    os.writeString(1, app);
    os.writeString(2, server);
    return os.getBinBuffer();
};

var __tars_Config$ListConfig$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "vf" : is.readList(3, true, TarsStream.List(TarsStream.String))
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __tars_Config$ListConfig$PE = function (app, server, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeString("app", app);
    tup.writeString("server", server);
    return tup;
};

var __tars_Config$ListConfig$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "vf" : tup.readList("vf", TarsStream.List(TarsStream.String))
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __tars_Config$ListConfig$ER = function (data) {
    throw _makeError(data, "Call Config::ListConfig failed");
};

tars.ConfigProxy.prototype.ListConfig = function (app, server) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("ListConfig", __tars_Config$ListConfig$PE(app, server, version), arguments[arguments.length - 1], __tars_Config$ListConfig$IF).then(__tars_Config$ListConfig$PD, __tars_Config$ListConfig$ER);
    } else {
        return this._worker.tars_invoke("ListConfig", __tars_Config$ListConfig$IE(app, server), arguments[arguments.length - 1], __tars_Config$ListConfig$IF).then(__tars_Config$ListConfig$ID, __tars_Config$ListConfig$ER);
    }
};
tars.ConfigProxy.ListConfig = __tars_Config$ListConfig$IF;

var __tars_Config$ListConfigByInfo$IF = {
    "name" : "ListConfigByInfo",
    "return" : "int32",
    "arguments" : [{
        "name" : "configInfo",
        "class" : "tars.ConfigInfo",
        "direction" : "in"
    }, {
        "name" : "vf",
        "class" : "list(string)",
        "direction" : "out"
    }]
};

var __tars_Config$ListConfigByInfo$IE = function (configInfo) {
    var os = new TarsStream.TarsOutputStream();
    os.writeStruct(1, configInfo);
    return os.getBinBuffer();
};

var __tars_Config$ListConfigByInfo$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "vf" : is.readList(2, true, TarsStream.List(TarsStream.String))
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __tars_Config$ListConfigByInfo$PE = function (configInfo, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeStruct("configInfo", configInfo);
    return tup;
};

var __tars_Config$ListConfigByInfo$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "vf" : tup.readList("vf", TarsStream.List(TarsStream.String))
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __tars_Config$ListConfigByInfo$ER = function (data) {
    throw _makeError(data, "Call Config::ListConfigByInfo failed");
};

tars.ConfigProxy.prototype.ListConfigByInfo = function (configInfo) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("ListConfigByInfo", __tars_Config$ListConfigByInfo$PE(configInfo, version), arguments[arguments.length - 1], __tars_Config$ListConfigByInfo$IF).then(__tars_Config$ListConfigByInfo$PD, __tars_Config$ListConfigByInfo$ER);
    } else {
        return this._worker.tars_invoke("ListConfigByInfo", __tars_Config$ListConfigByInfo$IE(configInfo), arguments[arguments.length - 1], __tars_Config$ListConfigByInfo$IF).then(__tars_Config$ListConfigByInfo$ID, __tars_Config$ListConfigByInfo$ER);
    }
};
tars.ConfigProxy.ListConfigByInfo = __tars_Config$ListConfigByInfo$IF;

var __tars_Config$checkConfig$IF = {
    "name" : "checkConfig",
    "return" : "int32",
    "arguments" : [{
        "name" : "appServerName",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "filename",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "host",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "result",
        "class" : "string",
        "direction" : "out"
    }]
};

var __tars_Config$checkConfig$IE = function (appServerName, filename, host) {
    var os = new TarsStream.TarsOutputStream();
    os.writeString(1, appServerName);
    os.writeString(2, filename);
    os.writeString(3, host);
    return os.getBinBuffer();
};

var __tars_Config$checkConfig$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "result" : is.readString(4, true, "")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __tars_Config$checkConfig$PE = function (appServerName, filename, host, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeString("appServerName", appServerName);
    tup.writeString("filename", filename);
    tup.writeString("host", host);
    return tup;
};

var __tars_Config$checkConfig$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "result" : tup.readString("result")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __tars_Config$checkConfig$ER = function (data) {
    throw _makeError(data, "Call Config::checkConfig failed");
};

tars.ConfigProxy.prototype.checkConfig = function (appServerName, filename, host) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("checkConfig", __tars_Config$checkConfig$PE(appServerName, filename, host, version), arguments[arguments.length - 1], __tars_Config$checkConfig$IF).then(__tars_Config$checkConfig$PD, __tars_Config$checkConfig$ER);
    } else {
        return this._worker.tars_invoke("checkConfig", __tars_Config$checkConfig$IE(appServerName, filename, host), arguments[arguments.length - 1], __tars_Config$checkConfig$IF).then(__tars_Config$checkConfig$ID, __tars_Config$checkConfig$ER);
    }
};
tars.ConfigProxy.checkConfig = __tars_Config$checkConfig$IF;

var __tars_Config$checkConfigByInfo$IF = {
    "name" : "checkConfigByInfo",
    "return" : "int32",
    "arguments" : [{
        "name" : "configInfo",
        "class" : "tars.ConfigInfo",
        "direction" : "in"
    }, {
        "name" : "result",
        "class" : "string",
        "direction" : "out"
    }]
};

var __tars_Config$checkConfigByInfo$IE = function (configInfo) {
    var os = new TarsStream.TarsOutputStream();
    os.writeStruct(1, configInfo);
    return os.getBinBuffer();
};

var __tars_Config$checkConfigByInfo$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "result" : is.readString(2, true, "")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __tars_Config$checkConfigByInfo$PE = function (configInfo, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeStruct("configInfo", configInfo);
    return tup;
};

var __tars_Config$checkConfigByInfo$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "result" : tup.readString("result")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __tars_Config$checkConfigByInfo$ER = function (data) {
    throw _makeError(data, "Call Config::checkConfigByInfo failed");
};

tars.ConfigProxy.prototype.checkConfigByInfo = function (configInfo) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("checkConfigByInfo", __tars_Config$checkConfigByInfo$PE(configInfo, version), arguments[arguments.length - 1], __tars_Config$checkConfigByInfo$IF).then(__tars_Config$checkConfigByInfo$PD, __tars_Config$checkConfigByInfo$ER);
    } else {
        return this._worker.tars_invoke("checkConfigByInfo", __tars_Config$checkConfigByInfo$IE(configInfo), arguments[arguments.length - 1], __tars_Config$checkConfigByInfo$IF).then(__tars_Config$checkConfigByInfo$ID, __tars_Config$checkConfigByInfo$ER);
    }
};
tars.ConfigProxy.checkConfigByInfo = __tars_Config$checkConfigByInfo$IF;

var __tars_Config$loadConfig$IF = {
    "name" : "loadConfig",
    "return" : "int32",
    "arguments" : [{
        "name" : "app",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "server",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "filename",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "config",
        "class" : "string",
        "direction" : "out"
    }]
};

var __tars_Config$loadConfig$IE = function (app, server, filename) {
    var os = new TarsStream.TarsOutputStream();
    os.writeString(1, app);
    os.writeString(2, server);
    os.writeString(3, filename);
    return os.getBinBuffer();
};

var __tars_Config$loadConfig$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "config" : is.readString(4, true, "")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __tars_Config$loadConfig$PE = function (app, server, filename, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeString("app", app);
    tup.writeString("server", server);
    tup.writeString("filename", filename);
    return tup;
};

var __tars_Config$loadConfig$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "config" : tup.readString("config")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __tars_Config$loadConfig$ER = function (data) {
    throw _makeError(data, "Call Config::loadConfig failed");
};

tars.ConfigProxy.prototype.loadConfig = function (app, server, filename) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("loadConfig", __tars_Config$loadConfig$PE(app, server, filename, version), arguments[arguments.length - 1], __tars_Config$loadConfig$IF).then(__tars_Config$loadConfig$PD, __tars_Config$loadConfig$ER);
    } else {
        return this._worker.tars_invoke("loadConfig", __tars_Config$loadConfig$IE(app, server, filename), arguments[arguments.length - 1], __tars_Config$loadConfig$IF).then(__tars_Config$loadConfig$ID, __tars_Config$loadConfig$ER);
    }
};
tars.ConfigProxy.loadConfig = __tars_Config$loadConfig$IF;

var __tars_Config$loadConfigByHost$IF = {
    "name" : "loadConfigByHost",
    "return" : "int32",
    "arguments" : [{
        "name" : "appServerName",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "filename",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "host",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "config",
        "class" : "string",
        "direction" : "out"
    }]
};

var __tars_Config$loadConfigByHost$IE = function (appServerName, filename, host) {
    var os = new TarsStream.TarsOutputStream();
    os.writeString(1, appServerName);
    os.writeString(2, filename);
    os.writeString(3, host);
    return os.getBinBuffer();
};

var __tars_Config$loadConfigByHost$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "config" : is.readString(4, true, "")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __tars_Config$loadConfigByHost$PE = function (appServerName, filename, host, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeString("appServerName", appServerName);
    tup.writeString("filename", filename);
    tup.writeString("host", host);
    return tup;
};

var __tars_Config$loadConfigByHost$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "config" : tup.readString("config")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __tars_Config$loadConfigByHost$ER = function (data) {
    throw _makeError(data, "Call Config::loadConfigByHost failed");
};

tars.ConfigProxy.prototype.loadConfigByHost = function (appServerName, filename, host) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("loadConfigByHost", __tars_Config$loadConfigByHost$PE(appServerName, filename, host, version), arguments[arguments.length - 1], __tars_Config$loadConfigByHost$IF).then(__tars_Config$loadConfigByHost$PD, __tars_Config$loadConfigByHost$ER);
    } else {
        return this._worker.tars_invoke("loadConfigByHost", __tars_Config$loadConfigByHost$IE(appServerName, filename, host), arguments[arguments.length - 1], __tars_Config$loadConfigByHost$IF).then(__tars_Config$loadConfigByHost$ID, __tars_Config$loadConfigByHost$ER);
    }
};
tars.ConfigProxy.loadConfigByHost = __tars_Config$loadConfigByHost$IF;

var __tars_Config$loadConfigByInfo$IF = {
    "name" : "loadConfigByInfo",
    "return" : "int32",
    "arguments" : [{
        "name" : "configInfo",
        "class" : "tars.ConfigInfo",
        "direction" : "in"
    }, {
        "name" : "config",
        "class" : "string",
        "direction" : "out"
    }]
};

var __tars_Config$loadConfigByInfo$IE = function (configInfo) {
    var os = new TarsStream.TarsOutputStream();
    os.writeStruct(1, configInfo);
    return os.getBinBuffer();
};

var __tars_Config$loadConfigByInfo$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "config" : is.readString(2, true, "")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __tars_Config$loadConfigByInfo$PE = function (configInfo, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeStruct("configInfo", configInfo);
    return tup;
};

var __tars_Config$loadConfigByInfo$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "config" : tup.readString("config")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __tars_Config$loadConfigByInfo$ER = function (data) {
    throw _makeError(data, "Call Config::loadConfigByInfo failed");
};

tars.ConfigProxy.prototype.loadConfigByInfo = function (configInfo) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("loadConfigByInfo", __tars_Config$loadConfigByInfo$PE(configInfo, version), arguments[arguments.length - 1], __tars_Config$loadConfigByInfo$IF).then(__tars_Config$loadConfigByInfo$PD, __tars_Config$loadConfigByInfo$ER);
    } else {
        return this._worker.tars_invoke("loadConfigByInfo", __tars_Config$loadConfigByInfo$IE(configInfo), arguments[arguments.length - 1], __tars_Config$loadConfigByInfo$IF).then(__tars_Config$loadConfigByInfo$ID, __tars_Config$loadConfigByInfo$ER);
    }
};
tars.ConfigProxy.loadConfigByInfo = __tars_Config$loadConfigByInfo$IF;



