{
    "localeCode": "en",
    "localeName": "English",
    "version": "2.0.0",
    "header": {
        "tab": {
            "tab1": "Services",
            "tab2": "operation",
            "tab3": "Release package",
            "tab4": "cache configuration",
            "tab5": "Operation Manage",
            "tab6": "Base Manage",
            "tab7": "Services History Manage",
            "tab8": "Gateway Config",
            "tab9": "Service Market"
        },
        "logout": "Logout",
        "modifyPass": "Modify Password",
        "userCenter": "User Center",
        "extension": "Extension"
    },
    "callChain": {
        "sub": "query",
        "noResult": "No result",
        "allTrackingNumbers": "All tracking numbers:",
        "pleaseSelectTrackingNumber": "Please select tracking number",
        "method": "method:",
        "selectMethod": "Please select a method",
        "methodTrackingNumbers": "Tracking number under this method:",
        "selectMethodTrackingNumbers": "Please select the tracking number under the method",
        "trackingNumbers": "Tracking number：",
        "date": "date",
        "btime": "start time",
        "etime": "End time",
        "timeStamp": "time stamp",
        "operation": "operation",
        "detail": "details",
        "sbtime": "Please select start time",
        "setime": "Please select the end time",
        "sdata": "Please select a date",
        "searchSuc": "query was successful",
        "stringBtime": "Start time：",
        "stringEtime": "End time：",
        "clientTime": "Total client time：",
        "serverTime": "Total server time：",
        "timeFrame": "time frame",
        "serverRelationship": "Service invocation relationship",
        "nodeRelationship": "Node call relationship",
        "relation": {
            "need": "need",
            "flow": "total flow",
            "avgTime": "average time(ms)",
            "abnormalRate": "abnormal rate",
            "timeoutRate": "timeout rate"
        }
    },
    "deployLog": {
        "log": "Deploy tarslog first",
        "installNode": "Please install TarsNode first",
        "failed:": "Server deploy failed",
        "sameWithRegistry": "Can not deploy tarslog in same machine with tars framework",
        "info": "Please deploy tarslog in machine(not tars framework machine)",
        "add_node": "Please add a business node first",
        "description": "There are no other nodes except framework nodes. Please refer to tars cloud to complete the addition of nodes",
        "install": "Deploy"
    },

    "task": {
        "params": "parameters error",
        "serverLimit": "tars server must keep one at least",
        "framework": "servers deploy in tars framework can not be undeployed"
    },
    "api": {
        "blank": {
            "error": {
                "message": "blank error message"
            },
            "template": {
                "id": "blank template id",
                "name": "blank template name"
            },
            "parent": {
                "template": {
                    "name": "blank parent template name"
                }
            }
        },
        "create": {
            "config": {
                "file": "create configuration file"
            }
        },
        "config": {
            "file": {
                "being": {
                    "referred": "configuration file being referred"
                }
            }
        },
        "cant": {
            "delete": {
                "or": {
                    "update": "can't delete/update"
                }
            },
            "update": "can't update"
        },
        "nonexistent": {
            "template": "nonexistent template",
            "parent": {
                "template": "nonexistent parent template"
            },
            "multipart": "can't find out upload data"
        },
        "template": {
            "being": {
                "referred": "template being referred"
            }
        },
        "expand": {
            "node": {
                "status": {
                    "existent": "existent",
                    "nonexistent": "no expand"
                }
            }
        },
        "parameter": {
            "blank": "parameter {0} is blank",
            "invalid": "invalid parameter {0} value"
        },
        "execute": {
            "package": {
                "script": {
                    "error": "execute package command error"
                }
            }
        },
        "resource": {
            "tarsNodeExist": "Node is already exist",
            "downloadFail": "download tarsnode.tgz package failed",
            "registryAddressIsEmpty": "registry address is empty",
            "machineIpIsEmpty": "machine ip is empty",
            "installFailed": "Install Node failed",
            "uninstallFailed": "Uninstall Node failed",
            "notConfig": "No machine configuration was found",
            "serverExist": "There is a service on the machine that does not allow uninstall the tars node",
            "sshFailed": "SSH link failed",
            "installSuccess": "Install Node successfully",
            "uninstallSuccess": "Uninstall Node successfully"
        }
    },

    "common": {
        "reTry": "Please check database connection",
        "deploy": "You can not deploy server in tars framework node",
        "createPerson": "createPerson",
        "baseInfo": "baseInfo",
        "nextStep": "nextStep",
        "prevStep": "prevStep",
        "admin": "admin",
        "serial": "serial",
        "config": "configuration",
        "patch": "publish",
        "gracePatch": "grace publish",
        "graceInfo": "",
        "service": "service",
        "time": "Time",
        "name": "name",
        "true": "true",
        "false": "false",
        "yes": "yes",
        "no": "no",
        "template": "template",
        "type": "Type",
        "cancel": "cancel",
        "submit": "ok",
        "choose": "choose",
        "status": "status",
        "result": "result",
        "error": "Error!!!",
        "warning": "Warning!!!",
        "success": "Success!!!",
        "ip": "node",
        "systemError": "system error",
        "noPrivilage": "no privilage",
        "notEmpty": " is required",
        "mustUnique": "already exist",
        "needNumber": " must be numeric type",
        "needArray": " must be array type",
        "needObject": " must be object type",
        "needBoolean": " must be boolean type",
        "noLogin": "You have not been login",
        "nodata": "No Data",
        "noService": "No Services",
        "retry": "Click to try again",
        "enable": "enable",
        "disable": "disable",
        "alert": "Alert",
        "networkErr": "Network Error",
        "set": {
            "setName": "SET Name",
            "setArea": "SET Area",
            "setGroup": "SET Group"
        },
        "message": "Message"
    },
    "operate": {
        "update": "update",
        "undeploy": "undeploy",
        "restart": "restart",
        "start": "start",
        "stop": "stop",
        "restartServer": "restart Server",
        "startServer": "start Server",
        "stopServer": "stop Server",
        "pause": "pause",
        "resume": "resume",
        "add": "add",
        "manage": "management",
        "config": "config",
        "approval": "approval",
        "modify": "modify",
        "delete": "delete",
        "more": "more",
        "getMore": "More",
        "download": "Download",
        "operates": "Operates",
        "view": "view",
        "merge": "merge",
        "search": "search",
        "server": "Server",
        "servant": "servant",
        "k8s": "K8S",
        "viewTemplate": "view Template",
        "privateTemplateManage": "private Template Manage",
        "goback": "go back",
        "default": "default",
        "save": "save",
        "submit": "submit",
        "status": "status",
        "title": {
            "update": "Update",
            "add": "Add",
            "more": "More"
        },
        "retry": "retry",
        "goto": "Jump to the service",
        "copy": "copy",
        "statusView": "View Service Status",
        "templateView": "View Template",
        "deletePod": "Rebuild",
        "hpa": "HPA Management",
        "resource": "Resource Management",
        "yaml": "Yaml editor",
        "network": "Host mapping",
        "disk": "Disk management",
        "pull": "ImagePullPolicy",
        "stacked": "Stacked",
        "stackedInfo": "After enable stacking, the same service will be abled to deploy on the same host",
        "stackedInvalid": "The stack cannot be turned on if the service uses a host resource ",
        "launcherType": "LaunchType",
        "backgroundInfo": "The death of the background service will not lead to the reconstruction of the pod. Tarsnode will automatically pull the service",
        "foregroundInfo": "The front desk service was restarted, resulting in the reconstruction of the pod",
        "jobModel": "Job Model",
        "nodeSelect": "Node selection",
        "copyNode": "copy of the slip",
        "viewEvent": "View events",
        "wrap": "Auto wrap",
        "previous": "Previous containers",
        "clear": "Clear",
        "close": "Close",
        "addTestCase": "add testcase",
        "testCaseList": "testcase list"
    },
    "index": {
        "rightView": {
            "title": "choose a service",
            "tips": "if you want to check the service list or the Real-time service status ,<br>please choose a service on the left menu.",
            "tab": {
                "patch": "Publish",
                "serviceConfig": "Service Configuration",
                "setConfig": "SET Configuration",
                "appConfig": "APP Configuration",
                "statMonitor": "Status Monitor",
                "propertyMonitor": "Property Monitor",
                "alarmConfig": "Alarm Configuration",
                "privileage": "Privileage",
                "infDebuger": "Interface Debuger",
                "cacheDebug": "Cache Debuger",
                "treeConfig": "Call Chain",
                "averageDuration": "Average duration",
                "trackingNumber": "Tracking number"
            }
        }
    },
    "alarmConfig": {
        "alarmcontact": "User contact configuration",
        "alarmUser": "Alarm recipient configuration",
        "shieldAlarm": "Shield alarm"
    },
    "nodeList": {
        "table": {
            "th": {
                "node_name": "NodeName",
                "long_connection": "Long Connection",
                "last_heartbeat": "Last Heartbeat",
                "present_state": "Present State",
                "version": "Version",
                "result": "Result",
                "label": "label",
                "last_notity": "Last Status",
                "load_avg5": "Load",
                "check": "Operator"
            },
            "edit": "Edit",
            "check": "Check",
            "delete": "Delete"
        },
        "checkNode": "Check Node Connection",
        "deleteNode": "Delete Node",
        "confirmDeleteNode": "Confire delete node?Please stop the node on the node machine and log off the service on the node."
    },
    "machineInfo": {
        "title": "The basic load of the server",
        "char": {
            "cpuUsed": "cpuUsed(%)",
            "loadAvg1": "loadAvg1",
            "memUsed": "memUsed(%)",
            "memAvailable": "memAvailable(M)",
            "nodeDiskUsed": "nodeDiskUsed(%)",
            "nodeDiskAvailable": "nodeDiskAvailable(M)",
            "rootDiskUsed": "rootDiskUsed(%)",
            "rootDiskAvailable": "rootDiskAvailable(M)"
        },
        "pip": {
            "title": {
                "cpuChart": "CPU",
                "memChart": "MEM",
                "nodediskChart": "NODE DISK",
                "rootdiskChart": "ROOT DISK"
            },
            "label": {
                "used": "used",
                "avail": "avail"
            },
            "series": {
                "name": "Usage Rate"
            }
        }
    },
    "serverList": {
        "batch": {
            "edit": "batch edit",
            "restart": "batch restart",
            "stop": "batch stop",
            "elegantTask": "elegant task",
            "commonTask": "common task",
            "elegantEachNum": "each num per task"
        },
        "title": {
            "serverList": "Services",
            "serverStatus": "Real Time Service Status",
            "patchList": "Patchs",
            "buildList": "Builds",
            "serverIp": "Node List",
            "execute": "execute...",
            "executeSuccess": "Success"
        },
        "table": {
            "th": {
                "group": "group",
                "service": "Service",
                "ip": "Node",
                "zb": "main",
                "nodeIP": "Node IP",
                "area": "area",
                "podID": "pod ID",
                "podName": "pod Name",
                "podIP": "pod IP",
                "enableSet": "SET",
                "configStatus": "Configuration Status",
                "currStatus": "Current Status",
                "currMessage": "Current Message",
                "flowStatus": "Flow Status",
                "processID": "Process ID",
                "version": "Version",
                "versionPath": "Version Path",
                "operator": "Publish User",
                "time": "Publish Time",
                "createTime": "Create Time",
                "createPerson": "Create Person",
                "updateTime": "Update Time",
                "startTime": "Start Time",
                "deleteTime": "Delete Time",
                "threadID": "Thread ID",
                "serviceID": "Service ID",
                "result": "Result",
                "buildID": "Build ID",
                "buildTime": "Build Time",
                "enableTime": "Enable Time",
                "enablePerson": "Enable Person",
                "source": "Source",
                "lastUser": "last modify User"
            },
            "servant": {
                "title": "Servants",
                "adress": "endpoint",
                "nodeName": "node name",
                "thread": "threads count",
                "connections": "Max connections",
                "capacity": "Max queue",
                "timeout": "Queue timeout(ms)"
            },
            "k8s": {
                "title": "K8S"
            },
            "msg": {
                "fail": "Failed to load the service list and retry?"
            }
        },
        "dlg": {
            "isBackup": "is backup",
            "useIdc": "use IDC group",
            "groupName": "IDC group Name",
            "placeholder": {
                "english": "all lower-case",
                "num": "number or *",
                "thread": "Nodejs >=1,other >=3"
            },
            "run_type": "run type",
            "run_typeInfo": "Note: modify the run mode, you need to republish the program! ",
            "serviceType": "service type",
            "asyncThread": "async threads",
            "defaultPath": "default path",
            "exePath": "exe path",
            "startScript": "start script",
            "stopScript": "stop script",
            "monitorScript": "monitor script",
            "privateTemplate": "private template",
            "errMsg": {
                "required": "All starred must be filled in",
                "setName": "Set name can only contain english lowercase letters",
                "setArea": "Set area can only contain english lowercase letters",
                "setGroup": "Set group must be a number or *",
                "defaultPath": "default path error,must be an absolute path",
                "exePath": "EXE path error,must be an absolute path",
                "startScript": "start script path error,must be an absolute path",
                "stopScript": "stop script path error,must be an absolute path",
                "monitorScript": "monitoring script path error,must be an absolute path",
                "updateSuccess": "Success! the service has been updated successfully",
                "updateFailed": "Failed! service update failed"
            },
            "msg": {
                "undeploy": "Are you sure to undeploy this service?",
                "undeployFailed": "undeploy failed"
            },
            "title": {
                "editService": "Edit Service",
                "undeploy": "undeploy",
                "taskStatus": "task status"
            }
        },
        "tips": {
            "treeid": "Please select a service from the left side of the business tree",
            "loadingError": "error",
            "paramsError": "params error",
            "systemError": "system error",
            "undeploy": "can`t undeploy running service",
            "success": "Notification Successful",
            "error": "Operation Failed",
            "deletePod": "are you sure to rebuild this pod"
        },
        "undeploy": {
            "failed": "undeploy failed",
            "success": "undeploy success"
        },
        "restart": {
            "notStart": "not start",
            "preparing": "prepare publish package",
            "running": "running",
            "success": "success",
            "failed": "failed",
            "cancel": "cancel",
            "parial": "partial success",
            "restartFailed": "restart failed",
            "restartResult": "restart result",
            "pauseFlow": "closing flow(wait 75s)"
        },
        "startService": {
            "msg": {
                "startService": "Are you sure to start this service"
            }
        },
        "restartService": {
            "msg": {
                "restartService": "Are you sure to restart this service"
            }
        },
        "stopService": {
            "msg": {
                "stopService": "Are you sure to stop this service"
            }
        },
        "servant": {
            "obj": "OBJ name can only contains english letters",
            "thread": "threads must be numeric and greater than 0",
            "error": "Error!!!  address：To tcp or udp or ssl at the beginning, there-h-t-p three parameters, -p 0-65535, -t greater than 0, -h ip",
            "ip": "IP format is wrong, please re-fill.",
            "servantAddFailed": "Servant added failed",
            "servantUpdateFailed": "Servant updated failed",
            "a": "Are you sure to delete the Servant",
            "deployService": "deploy service",
            "upload": "upload",
            "appService": "app·service",
            "objName": "OBJ name",
            "c": "English letters, don't need to add in front of the app name and the service name",
            "numOfThread": "threads count",
            "BindingAddress": "Binding address",
            "sample": "sample",
            "connections": "max connecttions",
            "lengthOfQueue": "max queue length",
            "queueTimeout": "queue timeout(ms)",
            "allowIP": "allow ip",
            "protocol": "protocol",
            "notTARS": "not TARS",
            "treatmentGroup": "treatment group",
            "releasePackage": "release package",
            "comment": "comment",
            "logLevel": "log level",
            "pushFile": "push config file",
            "sendCommand": "send customer cmd",
            "serviceLink": "view service Link",
            "taskID": "taskID",
            "statusCode": "error status code,status code",
            "copyErr": "Copy failed, browser is not compatible"
        },
        "link": {
            "nodeLog": "view node log",
            "remoteLog": "view remote log",
            "cpuTuner": "view server node load",
            "invalidNode": "(Invalid Node)"
        }
    },
    "pub": {
        "btn": {
            "pub": "publish node",
            "pubk8s": "publish image",
            "history": "history"
        },
        "dlg": {
            "patchType": "PatchType",
            "ip": "Node",
            "releaseVersion": "release version",
            "id": "image ID",
            "image": "add image",
            "imageAddress": "image address",
            "upload": "upload release package",
            "add": "add",
            "secret": "Secret",
            "mark": "Mark",
            "compileAndPublish": "compile and publish",
            "tgzRun": "Normal",
            "containerRun": "Container",
            "containerInfo": "After tarspatch open container model, your can use container mode run server",
            "elegantPublish": "elegant publish",
            "elegantEachNum": "each num per task",
            "commomPublish": "common publish",
            "releasePkg": "release package",
            "defaultValue": "choose ...",
            "filetype": "only accept .tars files",
            "noConfFile": "no configuration files",
            "a": "please choose an ip",
            "ab": "please choose a release version",
            "nodeImage": "Tafnode version",
            "nodeImageTip": "Select a version of tarsnode",
            "unpublished": "Unpublished",
            "conf": "Configure compiler interface",
            "tag": "version interface",
            "compiler": "compiler interface",
            "task": "compilation progress interface",
            "compileProgress": "Compilation progress",
            "uploadPkg": "Uploading package, please wait",
            "hasModule": "We need to log off all the modules under this application to log off the unique router and proxy services",
            "cantUseApply": "Offline is the only node. After offline, the application will be useless",
            "foregroundTip": "The current service is started in the front end and cannot be restarted and stopped on the management platform"
        },
        "tips": {
            "default": "Release management management service level, please first in the left tree selection service business.",
            "tagListUrl": "Please configure SVN / GIT version acquisition interface first",
            "tag": "Please enter the interface address to get the version list"
        },
        "date": "Date",
        "select": {
            "version": "version",
            "pubTime": "publish time",
            "uploadTime": "upload time",
            "uploadUser": "upload user",
            "remark": "upload remark"
        }
    },
    "cfg": {
        "title": {
            "a": "Configuration",
            "b": "Reference files",
            "c": "Node configuration",
            "viewConf": "View configuration content",
            "viewMerged": "View merged configuration",
            "viewHistory": "View update history",
            "viewTemplate": "View template content",
            "viewProfileTemplate": "View profile template content"
        },
        "btn": {
            "add": "add configuration",
            "addRef": "add reference file",
            "pushFile": "push file",
            "fileName": "fileName",
            "content": "content",
            "reason": "reason",
            "lastUpdate": "lastupdate time",
            "mod": "the modification"
        },
        "table": {
            "modCfg": "edit",
            "delCfg": "delete",
            "delRef": "delete",
            "serviceName": "service name",
            "viewMerge": "view",
            "viewIpContent": "nodeConf",
            "mangeRefFile": "manage reference file"
        },
        "msg": {
            "chooseCfg": "please choose service configuration first",
            "refFile": "reference file",
            "addError": "add file error",
            "delError": "delete error",
            "confirm": "Are you sure to delete this file",
            "viewContent": "view content",
            "confirmCfg": "Are you sure to delete this configuration",
            "nofile": "no file",
            "selectNode": "Please select at least one node",
            "empty": "Empty"
        },
        "dlg": {
            "fileName": "fileName is required",
            "fileNameReg": "The file name can contain only letters or Numbers, point, underscores, dash",
            "contentReg": "content is required",
            "addSucccess": "add success",
            "exists": "File with the same name already exists!"
        }
    },
    "monitor": {
        "search": {
            "a": "show date",
            "b": "compare date",
            "start": "start time",
            "end": "end time",
            "master": "master name",
            "slave": "slave name",
            "interfaceName": "interface name",
            "masterIP": "master IP",
            "slaveIP": "slave IP"
        },
        "btn": {
            "submit": "get monitoring charts"
        },
        "msg": {
            "info": "system is set up for the first time, contrast, countless according to please compare the date to date"
        },
        "table": {
            "total": "total flow",
            "curr": "the same day",
            "contrast": "contrast day",
            "fluctuating": "swings",
            "average": "average response time in Day1",
            "abnormal": "ratio of exceptional request in Day1",
            "abnormalC": "ratio of exceptional request in Day2",
            "timeout": "ratio of out-of-time request in Day1",
            "timeoutC": "ratio of out-of-time request in Day2",
            "errTips": "Service monitoring need specific to the service, please select a service in the left tree first.",
            "a": "average time",
            "b": "abnormal rate",
            "c": "timeout rate",
            "d": "Monitor time"
        },
        "select": {
            "all": "all",
            "property": "property",
            "strategy": "policy"
        },
        "property": {
            "property": "characteristic value of curr day",
            "propertyC": "characteristic value of contrast day"
        }
    },
    "imageService": {
        "title": {
            "view": "Image Version"
        },
        "btn": {
            "add": "Add",
            "docker": "Test Node Login Docker Registry",
            "imageTips": "If an unofficial docker registry is used, the image address must start with the docker registry address",
            "checkRegistry": "Check Registry Login"
        },
        "delete": {
            "confirmTips": "Confirm delete base image?"
        },
        "dockerPull": "Docker pull image in background...",
        "form": {
            "Image": "Image",
            "Count": "Image Version Count",
            "SupportedType": "Support Type",
            "CreationTime": "Create Time",
            "Mark": "Mark",
            "Result": "Docker Pull Result",
            "ImageHolder": "Please Input Registry",
            "ImageTips": "Image can not be empty",
            "ImageFormatTips": "Image format error",
            "SupportedTypeTips": "Support Type",
            "Secret": "Registry secret",
            "SecretTips": "Please Registry secret",
            "DeleteRegistryTips": "Confirm to delete registry address?",
            "NotDeleteRegistryTips": "The registry is referenced by some base images and cannot be deleted",
            "NotDeleteImageTips": "The image is referenced by the some services and cannot be deleted",
            "DeleteImageTips": "Confirm to delete image address?",
            "Choose": "Please choose some nodes",
            "Registry": "Registry Address",
            "UserName": "Registry UserName",
            "Password": "Registry Password",
            "CreatePerson": "Create Person",
            "CreateTime": "Create Time"
        },
        "node": {
            "idTip": "Please enter the image name",
            "imageAddressTip": "Please enter the mirror address",
            "markTip": "Please enter the image description",
            "deleteTip": "The default Node image cannot be deleted"
        }
    },
    "framework": {
        "remark": {
            "maxBuildTime": "Maximum duration of mirroring build",
            "imageRegistry": "Mirror push address",
            "nodeImage": "Use tafnode address by default",
            "tconfigHistory": "Maximum number of saved configuration information",
            "texitedPod": "Number of pods saved",
            "timageRelease": "Number of images saved",
            "nativeDBConfig": "General taf db configuration information",
            "nativeFramework": "Ordinary taf taf configuration file"
        }
    },
    "deployService": {
        "title": {
            "deploy": "Deploy",
            "approval": "Approval service",
            "history": "History service",
            "undeploy": "Undeploy service",
            "expand": "Expand service",
            "template": "Manage template",
            "affinity": "Manage affinity",
            "apply": "Apply for deployment",
            "nodes": "Node service",
            "check": "Check Framework",
            "gateway": "Gateway Config",
            "image": "Images",
            "baseImage": "Basic Image",
            "baseRegistry": "Docker Registry",
            "nodeImage": "Node Image",
            "application": "Manage application",
            "business": "Manage business",
            "businessRelation": "Business Relation",
            "idcManage": "Manage IDC Group",
            "exportServer": "Deployment Tool",
            "configSearch": "Configuration Retrieval",
            "board": "Maintenance Board",
            "userLog": "Operation log",
            "event": "Event query",
            "framework": "framework Config"
        },
        "form": {
            "app": "APP",
            "appAdd": "Input New App",
            "appMark": "App Mark",
            "business": "Business",
            "tips": "No need to add applications and services, such as MTT.HttpProxyServer.HttpProxyObj, where only fill HttpProxyObj",
            "serviceType": "Service type",
            "serviceName": "Service name",
            "serviceMark": "Service mark",
            "template": "Template",
            "node_name": "Node",
            "set": "Set grouping",
            "obj": "OBJ binds IP",
            "subtype": "Type",
            "port": "port",
            "portType": "PortType",
            "placeholder": "Only supports English letters",
            "portTips": "port range 0 ~ 30000, your input is beyond the scope",
            "appTips": "application name cannot be empty",
            "businessTips": "business name cannot be empty",
            "serviceTips": "the service name cannot be empty",
            "serviceTypeTips": "the service type cannot be empty",
            "baseImage": "base image",
            "baseImageTips": "base image cannot be empty",
            "baseImageRelease": "image version",
            "baseImageReleaseTips": "please choose image version",
            "templateTips": "the template cannot be empty",
            "serviceFormatTips": "The service name can only contain letters, Numbers, and begin with a letter",
            "nodeTips": "the node cannot be empty",
            "nodeFormatTips": "Node format is not correct, please enter the IP address",
            "setNameTips": "the Set name cannot be empty",
            "setAreaTips": "the Set area cannot be empty",
            "setNameFormatTips": "The Set name can only English lowercase letters",
            "setAreaFormatTips": "The Set area can only English lowercase letters",
            "setGroupTips": "Set group name cannot be empty",
            "setGroupFormatTips": "Set group name can only numbers or *",
            "inputTips": "all * must be filled",
            "objTips": "OBJ name cannot be empty",
            "deployServiceTip": "Are you sure to deploy this service?",
            "overwriteDeployServiceTip": "service exists, Are you sure to overwrite deploy this service?",
            "getPort": "get port",
            "applicationTip": "Application name does not exist or is illegal",
            "nodeListTip": "Node list does not be empty",
            "ret": {
                "success": "Deployed application submitted successfully",
                "failed": "Deployed application submission failed!Please contact your administrator"
            },
            "imageName": "Image Name",
            "image": "Image",
            "secret": "secret",
            "currStatus": "Status",
            "mark": "Mark",
            "createPerson": "CreatePerson",
            "createTime": "CreateTime",
            "nameTips": "This service is existing in the system, please change the application name, service name or nodes and retry",
            "portOrNetWork": "HostPort Or HostNetWork cannot co-exist",
            "batchDeploy": "Bulk Deploy",
            "id": "Id",
            "phase": "Phase",
            "message": "Message",
            "buildId": "Build Id",
            "delete": "Delete docker in building?",
            "labelMatch": {
                "labelValue": "Please enter, press enter to add, up to 63",
                "labelValid": "The label name does not conform to the specification",
                "labelMax": "The maximum number of label groups is 63",
                "labelValueValid": "Label values do not conform to specifications",
                "errorKey": "Label name is required",
                "errorValue": "The tag value cannot be empty",
                "addLabel": "Add a set of tags"
            },
            "affinity": "Affinitive selection",
            "k8sExtra": "PERFECT K8S INFORMATION OPTIONAL",
            "serverTag": "Image tag",
            "serverTagTip": "The image tag name is automatically generated by default",
            "format": "Install package format(in tgz format, the nodes environment needs to require the requirements of the tgz!)",
            "run_type": "Run Type",
            "baseImageId": "Run Container",
            "containRunInfo": "To enable the container run mode, please configure the basic image first",
            "tgz": "tgz",
            "docker": "docker",
            "uploadConf": "Upload Yaml Files",
            "uninstallTimeout": "Uninstall timeout. Please check whether the uninstall is successful!",
            "source": "From Cloud Market"
        },
        "table": {
            "th": {
                "endpoint": "OBJ Endpoint",
                "port": "Port",
                "protocol": "Protocol",
                "threads": "Threads",
                "replicas": "Replicas",
                "netMode": "Net Mode",
                "nodeSelector": "Node Selector",
                "stacked": "Stacked",
                "hostIpc": "HostIpc",
                "hostNetwork": "HostNetwork",
                "hostPort": "HostPort",
                "generateHostPort": "Generate",
                "checkHostPort": "Check port"
            },
            "tips": {
                "ip": "OBJ Endpoint cannot be empty",
                "ipFormat": "IP format error",
                "empty": "cannot be empty"
            }
        },
        "infos": {
            "objNodedupErr": "ObjName+Node_name cannot be repeat!"
        },
        "batchDeploy": {
            "errFile": "Upload of this file type is not allowed. Please upload files of type [.yml | .yaml]",
            "errConf": "Please check whether there is a problem with the yaml configuration",
            "title": {
                "config": "Configuration file content",
                "dcacheConf": "Module installation parameter information",
                "out": "Output information",
                "hasModule": "Module Already Exists"
            },
            "btn": {
                "clearLog": "Clear log",
                "uploadConf": "Upload Params",
                "uploadApplyConf": "Upload Params",
                "dcacheApply": "Start Installation",
                "shutdown": "shutdown"
            },
            "tip": {
                "stopSucc": "The termination is successful, and the next module will start to terminate"
            }
        },
        "resources": {
            "limitCpu": "CPU limit",
            "limitMem": "Memory limit",
            "requestCpu": "CPU Reserved",
            "requestMem": "Memory Reserved",
            "example": "For Example",
            "tip": {
                "resources": "Please edit resource management, resource limitation and reservation first"
            }
        },
        "hpa": {
            "form": {
                "minReplicas": "minReplicas",
                "maxReplicas": "maxReplicas",
                "resource": "Resource",
                "object": "Object",
                "val": "value",
                "averageValue": "AverageValue",
                "averageUtilization": "AverageValue",
                "IndicatorType": "Indicator Type",
                "IndicatorName": "Indicator Name",
                "targetType": "target Type",
                "value": "value",
                "objectVersion": "Describes the object API version",
                "objectType": "Describing object types",
                "objectName": "Description object name",
                "addIndicator": "Add indicators",
                "delIndicator": "Delete indicators"
            },
            "tip": {
                "minReplicas": "Please enter the minimum number of copies, limited number",
                "maxReplicas": "Please enter the maximum number of copy, limit number\n\n",
                "t1": "In order to use resource metrics in an HPA, you need to deploy the Metrics server.",
                "t2": "In order to use custom metrics in the HPA, you need to deploy a custom Metrics server, such as the Prometheus Adapter.",
                "t3": "In order to use the HPA's extension metrics, you need to deploy the extension metrics server, such as the Prometheus Adapter",
                "IndicatorType": "Please select the metric type",
                "IndicatorName": "Please select a metric name",
                "targetType": "Please select the target type",
                "value": "Please select the value",
                "checkForm": "Please check that the form is correct",
                "noIndicator": "Cannot find matching indicator, please configure"
            }
        },
        "disk": {
            "addDisk": "Add a mount group",
            "delDisk": "Deleting the current group",
            "diskName": "name of disk",
            "path": "Mount path",
            "info": "host path: /usr/local/app/tars/host-mount/${namespace}/${service}"

        }
    },
    "nodes": {
        "node_name": "Node(Input IP)",
        "nodeNameTips": "Node cannot be empty, Multi nodes are separated by ,",
        "port": "SSH PORT",
        "portTips": "SSH Port cannot be empty",
        "user": "User",
        "password": "Password",
        "runuser": "Run User",
        "runuserTips": "Run User cannot be empty",
        "btn": {
            "manualAddNode": "Manual Install node",
            "autoAddNode": "Auto Install node",
            "autoUpdateNode": "Batch Upgrate node",
            "check": "Click to check framework"
        },
        "manualAddNode": {
            "title": "Step",
            "info1": "Note 1: ${webhost} is address of web platform, ${localip} is ip of node machine",
            "info2": "Note 2: On the web platform, only the framework corresponds to the installation package of the compilation platform. Other OS installation packages need to be compiled manually by yourselves",
            "OS1": {
                "title": "Linux/Mac",
                "step1": "In node machine: wget 'http://${webhost}/get_tarsnode?ip=${localip}&runuser=${your user}' -O install_tarsnode.sh",
                "step2": "Run: sh install_tarsnode.sh",
                "step3": "Finish, install directory: /usr/local/app"
            },
            "OS2": {
                "title": "Windows",
                "step1": "In node machine open: http://${webhost}/get_tarsnode?ip=${localip}",
                "step2": "Save output to: install_tarsnode.sh",
                "step3": "Download busybox: http://${webhost}/files/busybox.exe",
                "step4": "In window console, run: busybox.exe install_tarsnode.sh",
                "step5": "In windows scheduled tasks add: c:\\tars-install\\tars\\tarsnode\\util\\monitor.bat",
                "step6": "Finish, install directory: c:\\tars-install\\tars"
            }
        },
        "add": {
            "nodeNameTips": "node name cannot be empty",
            "title": "Install Node(Windows not support)"
        },
        "label": {
            "title": "Edit Label",
            "name": "Label Name",
            "value": "Label Value",
            "operator": "Operator",
            "delete": "Delete"
        }
    },
    "connectNodeList": {
        "title": "Connect And Install",
        "btnInstall": "Install",
        "btnConnect": "Test Connect",
        "btnInstalling": "Installing",
        "btnInstalled": "Installed, Install Again",
        "btnClose": "Close",
        "execute": "Running, please wait",
        "executeConnect": "Execute connecting test, please wait",
        "executeInstall": "Execute installing, please wait",
        "installTgzNotExists": "Tarnode install file not exits, check file: /usr/local/app/web/files/tarsnode.tgz",
        "step1": "check package",
        "step2": "ssh link",
        "step3": "download package",
        "step4": "check params",
        "step5": "install node",
        "table": {
            "th": {
                "node_name": "Node",
                "connect": "Connection",
                "exists": "Overwrite",
                "install": "Intall Status"
            }
        },
        "connect": {
            "succ": "Connected",
            "failed": "SSH Connect Failed"
        },
        "exists": {
            "yes": "TarsNode exists",
            "no": "TarsNode not exists"
        },
        "install": {
            "connect": "Connecting",
            "waitNew": "New Install",
            "waitOverwrite": "Overwrite Install",
            "invalid": "Can not Install",
            "installing": "Installing"
        }
    },
    "checkTable": {
        "table": {
            "th": {
                "server_name": "Server Name",
                "node_name": "Node Name",
                "obj_name": "Obj Name",
                "status": "Check Status"
            }
        },
        "restartAdminRegistry": "Please check tarsAdminRegsitry is work fine or restart tars framework!",
        "adminRegistryFailed": "Call tarsAdminRegistry failed!",
        "failed": "Please check server is start successfully",
        "problem": "Problem?",
        "problemDialog": {
            "title": "Problem",
            "info": "In case of service exception, you can log in to the corresponding server and execute the following relevant commands as required",
            "restartFramework": "restart framework: /usr/local/app/tars/tars-start.sh",
            "stopFramework": "stop framework: /usr/local/app/tars/tars-stop.sh",
            "restartServer": "restart tars server: /usr/local/app/tars/tarsxxxx/util/start.sh"
        }
    },
    "template": {
        "search": {
            "parentTemplate": "Parent template"
        },
        "btn": {
            "addTempate": "add tempate",
            "addApplication": "add Application"
        },
        "form": {
            "content": "content"
        },
        "view": {
            "title": "View template"
        },
        "add": {
            "templateNameTips": "The template name cannot be empty",
            "templateFormatTips": "The template name can only contain letters, Numbers, and begin with a letter",
            "parentTemplate": "Please select the parent template",
            "title": "Add template"
        },
        "update": {
            "title": "Update tempate",
            "errTips": "update failed"
        },
        "delete": {
            "confirmTips": "Are you sure to delete this template",
            "title": "Delete template"
        }
    },
    "serviceApproval": {
        "RequestPerson": "request person",
        "RequestTime": "request time",
        "RequestMark": "request mark",
        "ApprovalResult": "approval result",
        "ApprovalTime": "approval time",
        "ApprovalMark": "approval mark"
    },
    "serviceExpand": {
        "title": "service expand",
        "form": {
            "tarIP": "Target IP",
            "placeholder": "Multiple IP separated by comma (,), semicolon (;) newline (\\ n)",
            "nodeConfig": "Node configuration",
            "copyNodeConfig": "copy node configuration",
            "preExpand": "Pre expand",
            "noExpand": "no expand",
            "disableSet": "disable Set",
            "errTips": {
                "tarIP": "tarIP can not be empty",
                "preExpand": "expansion failed! Please contact the administrator",
                "noneNodes": "Please check the object to be expanded",
                "nodeCheck": "Please check the nodes",
                "ipFormat": "Please fill in the correct IP address",
                "success": "Expansion success"
            }
        },
        "exists": "node has exists, no need expand, please check input",
        "newGroup": "Add a group",
        "removeGroup": "Remove last group"
    },
    "managePackage": {
        "title": "Manage Publish Package",
        "table": {
            "th": {
                "c1": "id",
                "c2": "Server Name",
                "c3": "Upload Time",
                "c4": "Update Text",
                "c5": "Publish Time",
                "c6": "Operator",
                "c7": "Publish User"
            }
        }
    },
    "historyList": {
        "title": "Release History",
        "delete": "Confirm to delete release history?",
        "table": {
            "th": {
                "c2": "serial",
                "c4": "details of the subtasks"
            }
        },
        "dlg": {
            "th": {
                "c1": "ID",
                "c2": "Application",
                "c3": "Service",
                "c4": "Node",
                "c5": "Command",
                "c7": "Execute info",
                "c8": "Status"
            }
        }
    },
    "user": {
        "op": "Operation",
        "dev": "Developer",
        "tips": {
            "sep": "Multiple people separated by semicolon"
        }
    },
    "resource": {
        "installRstMsg": ",The results of installment of Tarsnode are as follows:",
        "installResult": "Install result"
    },
    "publishLog": {
        "title": "Publish Log",
        "sync": "synchronizing PMS...",
        "releaseId": "Release ID",
        "releaseProgress": "Publishing progress（%）",
        "publishInfo": "Publishing, please wait..."
    },
    "event": {
        "eventLevel": "Event level",
        "type": {
            "server": "service",
            "cluster": "Cluster",
            "downtime": "Error down"
        },
        "picker": {
            "twoHours": "Nearly two hours",
            "fourHours": "Nearly four hours",
            "inTheDay": "in the day"
        }
    },
    "filter": {
        "title": {
            "app": "Application",
            "serverName": "service name",
            "business": "Business",
            "serverId": "Server ID",
            "adapterId": "Adapter ID",
            "adapterName": "Adapter Name",
            "port": "port",
            "mark": "Mark",
            "name": "Name",
            "node": "Node",
            "order": "Order",
            "domain": "Domain",
            "FirstLevelDomain": "First Level Domain",
            "SecondLevelDomain": "Second Level Domain",
            "ThirdLevelDomain": "Third Level Domain",
            "FourthLevelDomain": "Fourth Level Domain",
            "router": "Router",
            "routerType": "Router Type",
            "diffTxt": "Diff Text",
            "nodeName": "NodeName",
            "nodeFramework": "Can Deploy",
            "nodeAddress": "NodeAddress",
            "nodeInfo": "NodeInfo",
            "nodeLabels": "node Labels",
            "nodeAffinity": "please add tars.io/node.$Namespace label to node, so framework can manager the node",
            "CommonTag": "Common label",
            "AbilityTag": "Affinity label",
            "FrameWorkTag": "Frame node label",
            "tagName": "Tag name",
            "tagValue": "Tag value"
        },
        "tip": {
            "notTaf": "Custom labels cannot start with tars.io",
            "notNull": "this item cannot be empty",
            "application": "affinity application name cannot be empty",
            "addAffinityGroup": "Add an affinity group",
            "affinityRemark": "Affinity label 'tars.io/ability.$Namespace.$app.[$server]' ,Application Required",
            "frameworkUse": "Adjustment of node is used by the tars of the current namespace will affect the service deployment. Please confirm carefully!"
        },
        "btn": {
            "add": "Add",
            "addNode": "Add Node",
            "addServer": "Add Server",
            "addAffinity": "Add Affinity",
            "search": "Search",
            "editTag": "Edit the label",
            "editAffinity": "Edit Affinity",
            "searchAffinity": "Query affinity"
        },
        "dialog": {
            "editCommonTag": "Edit common tabs",
            "editAbilityTag": "Edit Ability"
        }
    },
    "table": {
        "btn": {
            "appList": "Application List",
            "deleteNode": "Delete Node",
            "deleteServer": "Delete Server"
        }
    },
    "dialog": {
        "title": {
            "add": "add",
            "edit": "edit"
        },
        "tips": {
            "delete": "Are you sure to delete",
            "item": "Please select one"
        }
    },
    "application": {
        "btn": {
            "add": "add application"
        },
        "form": {
            "application": "application",
            "person": "person",
            "time": "time",
            "content": "content"
        },
        "view": {
            "title": "View application"
        },
        "add": {
            "nameTips": "The application name cannot be empty",
            "formatTips": "The application name can only contain letters, Numbers, and begin with a letter",
            "parent": "Please select the parent application",
            "title": "Add application"
        },
        "update": {
            "title": "Update application",
            "errTips": "update failed"
        },
        "delete": {
            "confirmTips": "Are you sure to delete this application",
            "title": "Delete application"
        }
    },
    "business": {
        "btn": {
            "add": "add business"
        },
        "form": {
            "business": "business",
            "showName": "show name",
            "order": "order",
            "person": "person",
            "time": "time",
            "content": "content"
        },
        "view": {
            "title": "View business"
        },
        "add": {
            "nameTips": "The business name cannot be empty",
            "formatTips": "The business name can only contain letters, Numbers, and begin with a letter",
            "parent": "Please select the parent business",
            "title": "Add business"
        },
        "update": {
            "title": "Update business",
            "errTips": "update failed"
        },
        "delete": {
            "confirmTips": "Are you sure to delete this business",
            "title": "Delete business"
        }
    },
    "businessRelation": {
        "btn": {
            "add": "add business relation"
        },
        "view": {
            "title": "View business relation"
        },
        "form": {
            "person": "person",
            "time": "time"
        },
        "add": {
            "nameTips": "The business name cannot be empty",
            "formatTips": "The business name can only contain letters, Numbers, and begin with a letter",
            "title": "Add business relation"
        },
        "update": {
            "title": "Update business relation",
            "errTips": "update failed"
        },
        "delete": {
            "confirmTips": "Are you sure to delete this business relation",
            "title": "Delete business relation"
        }
    },
    "idc": {
        "grid": {
            "groupName": "Group Name",
            "groupNameCN": "Chinese Group Name",
            "ipOrder": "Allow Type",
            "allowIpRule": "IP Rule list",
            "dennyIpRule": "IP Denny List",
            "lastuser": "Last User",
            "modifyTime": "Modify Time"
        },
        "btn": {
            "add": "Add"
        },
        "update": {
            "title": "Edit IDC Group Info",
            "errTips": "Edit fail",
            "placeholder": "please input",
            "allowType": "The default is Denny allow, generally do not modify",
            "addIp": "Please add IP, last bit can use '*'",
            "errorIp": "Please input the correct IP, format (1-255). (0 ~ 255). (0 ~ 255). (0 ~ 255), only the final group can use the '*'",
            "exists": "already exists ip"
        },
        "delete": {
            "confirmTips": "Are you sure to delete this Group Info",
            "title": "Delete Group Info"
        }
    },
    "export": {
        "errorNode": "The imported Node node is not maintained in the system, please check",
        "needConf": "Need Export Conf",
        "needTgz": "Need Export Tgz",
        "export": "Export",
        "tab": {
            "edit": "Edit Export Configuration",
            "th": {
                "exportInfo": "Export Info",
                "exportIp": "Export IP",
                "exportOBJIp": "Export OBJ IP"
            }
        },
        "form": {
            "ipPlaceholder": "Please Input Ip",
            "ipError": " Please Input Right Ip",
            "valid": "The export must first edit the export to IP and OBJ bound IP"
        },
        "import": {
            "dlg": {
                "upload": "Please upload bulk distribution package"
            },
            "btn": {
                "uploadAndPublish": "Upload And Publish"
            }
        },
        "error": {
            "exportUnq": "Export ip cannot be repeated"
        }
    },
    "configSearch": {
        "form": {
            "configContent": "Search Content",
            "placeHolder": "Please Enter Search Information",
            "searchfield": "Search Keywords",
            "replacefield": "Replace Content",
            "replace": "Replace All",
            "batchPush": "Bulk PUSH",
            "batchReplace": "Batch Replace"
        },
        "table": {
            "th": {
                "application": "Application",
                "serverName": "Server Name",
                "node": "Host",
                "filename": "File Name",
                "lastTime": "Final Modified time",
                "lastUser": "Last Modified User"
            },
            "operate": {
                "nodeEdit": "Edit Node",
                "batchEdit": "Replace Configuration Files In Bulk"
            }
        }
    },
    "userlog": {
        "form": {
            "operateType": "Operation type",
            "type": {
                "patch_tars": "patch_tars",
                "restart": "restart",
                "stop": "stop",
                "undeploy_tars": "undeploy_tars",
                "send_command": "send_command",
                "add_conf": "add_conf",
                "update_conf": "update_conf",
                "rm_conf": "rm_conf",
                "expand_server": "expand_server",
                "expand_module": "expand_module"
            }
        },
        "table": {
            "time": "Operating time",
            "app": "application",
            "server": "service",
            "node": "node",
            "operate": "operate",
            "about": "Details",
            "operator": "Operator"
        }
    },
    "ssoHeader": {
        "tab": {
            "tab1": "My Privilege List",
            "tab2": "Manage User",
            "tab3": "Manage Privilege",
            "tab4": "Token Manage",
            "tab5": "Setting"
        },
        "modifyPass": "Modify Password"
    },
    "login": {
        "loginTitle": "Please Sign In",
        "userName": "User name",
        "password": "Password",
        "captcha": "Captcha",
        "repeatPassword": "Repeat password",
        "login": "Sign in",
        "toRegisterPage": "Create an account",
        "toLoginPage": "Sign in",
        "userNameTips": "User name is required",
        "userNameRegTips": "The user name can contain only letters or Numbers, underscores",
        "passwordTips": "Password is required",
        "passwordNoCorrect": "Incorrect password",
        "captchaTips": "Captcha is required",
        "userNoExist": "User name does not exist",
        "loginFailed": "Sign in failed",
        "registerTitle": "Please Sign Up",
        "repeatPasswordTips": "Repeat password is required",
        "register": "Sign up",
        "passwordDiff": "Two different input password, please re-entry",
        "hasExist": "User name already exists",
        "registerSucc": "Sign up successfully",
        "registerFailed": "Sign up failed",
        "getUidFailed": "Get user name failed",
        "logout": "Sign out",
        "noLogin": "You have not been sign in"
    },
    "auth": {
        "flag": "Flag(Application or Application.ServerName)",
        "role": "Role",
        "uid": "Uid",
        "privileges": "User Privileges",
        "flagTips": "Flag is required",
        "roleTips": "Role is required",
        "uidTips": "Uid is required",
        "uidPlaceholder": "if multiple uid, with a semicolon (;) space",
        "addPrivilege": "Add Privilege",
        "delPrivilege": "Revoke Privilege",
        "privilegeManageTitle": "Privilege Manage",
        "loadListError": "Load privilege list failed",
        "selectRecord": "Please select at least one record",
        "confirmDelete": "Are you sure to delete this record?",
        "loadUserIdError": "Load user list failed",
        "delSucc": "Delete successfully",
        "delError": "Delete error",
        "adminNotErase": "Admin user privilege can not be delete",
        "addUser": "Add User",
        "delUser": "Delete User",
        "userManageTitle": "User List",
        "userTime": "Create Time",
        "adminDelError": "admin Can not be deleted",
        "token": "TOKEN",
        "addToken": "Add Token",
        "delToken": "Delete Token",
        "tokenManageTitle": "Token List",
        "tokenExpireTime": "Token Expire Time",
        "tokenTime": "Token Create Time",
        "loadTokenError": "Load Token failed",
        "confirmTokenDelete": "Confirm to delete the token?",
        "confirmTokenTitle": "Delete Token",
        "status": "Status",
        "operator": "Operator",
        "tokenValid": "valid",
        "valid": "Enable",
        "notValid": "Disable",
        "setTokenValid": "Confirmm to Modify Token Status?",
        "setTokenError": "Set Token Status Failed",
        "setTokenSucc": "Modify Token Status Success",
        "editSet": "Update Setting",
        "setManageTitle": "Setting List",
        "setTitle": "Setting Title",
        "setInfo": "Setting Info",
        "loadSetError": "Load Setting failed",
        "setSetValid": "Confirmm to Modify Setting Status?",
        "setSetError": "Set Setting Status Failed",
        "setSetSucc": "Modify Setting Status Success",
        "about": "Setting description"
    },
    "pass": {
        "title": "Modify Password",
        "adminTitle": "First Login -- Set [admin] Password",
        "userName": "Uid",
        "password": "Password",
        "repeatPassword": "Repeat password",
        "modify": "Modify",
        "passwordDiff": "Two different input password, please re-entry",
        "modifySucc": "Modify Succ",
        "modifyFailed": "Modify Failed",
        "passwordTips": "Password is required",
        "repeatPasswordTips": "Repeat password is required",
        "setAdminPasswordFailed": "Can not set admin user password",
        "toIndexPage": "Goto My Index Page"
    },
    "ssoCommon": {
        "search": "search",
        "nextPage": "next",
        "prevPage": "back",
        "nodata": "no data",
        "admin": "admin user has all privileges",
        "success": " successfully",
        "failed": " failed",
        "confirmTitle": "System Confirm",
        "systemError": "system error",
        "noPrivilage": "no privilage",
        "notEmpty": " is required",
        "needNumber": " must be numeric type",
        "needArray": " must be array type",
        "needObject": " must be object type",
        "needBoolean": " must be boolean type"
    },
    "ldap": {
        "alert": "After LDAP is enabled, except for admin user, other users can login through LDAP. You can use LDAP to connect with other authority authentication systems in the company!",
        "info": "Open LDAP",
        "url": "ldap url",
        "basedn": "ldap basedn"
    },
    "localeSelect": {
        "cn": "Chinese",
        "en": "English"
    },
    "home": {
        "homeTab": "HOME",
        "closeAll": "Close All",
        "close": "Close",
        "placeholder": "Please Enter Content…",
        "visited": "Recently visited",
        "searchKey": "Please Enter Application /server_name /IP Address Search"
    },
    "board": {
        "module": {
            "FrameServices": "Framework Basic Services",
            "ServiceNode": "node",
            "AbnormalServices": "Abnormal Services",
            "AlarmInfo": "Alarm Message",
            "home": "Home"

        },
        "home": {
            "FrameServices": "Exception framework basic service",
            "ServiceNode": "Abnormal node",
            "AbnormalServices": "List of abnormal services",
            "AlarmInfo": "The latest alarm information of the day",
            "RefreshInterval": "Refresh Interval",
            "RefreshAll": "Refresh All"
        },
        "tip": {
            "none": "No abnormal data"

        },
        "alarm": {
            "alarmType": {
                "email": "email",
                "sms": "sms",
                "wechat": "wechat",
                "all": "all",
                "home": "home"
            },
            "form": {
                "startDate": "Start Date",
                "startTime": "Start Time",
                "endDate": "End Date",
                "endTime": "End Time",
                "alarmType": "Alarm Type"
            },
            "table": {
                "app": "Application",
                "server": "Server Name",
                "ip": "Node",
                "title": "Title",
                "content": "Content",
                "alarmTime": "Alarm Time",
                "alarmType": "Alarm Type"
            }
        }
    }
}